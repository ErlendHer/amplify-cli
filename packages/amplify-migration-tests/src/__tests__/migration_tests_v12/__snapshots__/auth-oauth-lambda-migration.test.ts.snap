// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify add auth... ...should init an Js project and add Oauth settings with userpool 1`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬───────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                                │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient    │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateUserPoolDomain      │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteUserPoolDomain      │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DescribeUserPool          │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateIdentityProvider    │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteIdentityProvider    │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:ListIdentityProviders     │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:UpdateIdentityProvider    │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient      │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ *                                                                                                                                                                                           │ Allow  │ cognito-idp:DescribeUserPoolDomain    │ AWS:\${UserPoolClientRole} │           │
│ - │ *                                                                                                                                                                                           │ Allow  │ cognito-idp:DescribeUserPoolDomain    │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream                  │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                     │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream                  │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                     │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteUserPoolDomain      │ AWS:\${UserPoolClientRole} │           │
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteIdentityProvider    │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:UpdateIdentityProvider    │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ + │ *                                                                                                                                                                                           │ Allow  │ cloudformation:DescribeStackResources │ AWS:\${UserPoolClientRole} │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴───────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Parameters
[+] Parameter facebookAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter facebookAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter facebookAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter googleAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter googleAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter googleAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleClientIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleKeyIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleTeamIdUserPool: {"Type":"String","NoEcho":true}

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[+] AWS::Cognito::UserPoolDomain HostedUIDomainResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIFacebookProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIGoogleProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUILoginWithAmazonProviderResource 
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,7 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,7 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');

const { deleteUserPoolDomain } = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  const ignoredPromise = handleEvent(event, context);
};

async function handleEvent(event, context) {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;

  try {
    const params = { Domain: inputDomainName, UserPoolId: userPoolId };
    await deleteUserPoolDomain(params).promise();
    response.send(event, context, response.SUCCESS);
  } catch (err) {
    if (err?.code === 'NotFoundException' || err?.code === 'InvalidParameterException') {
      response.send(event, context, response.SUCCESS);
    } else {
      response.send(event, context, response.FAILED, { err });
    }
  }
}

[~] AWS::IAM::Policy HostedUICustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,8 +2,6 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateUserPoolDomain",
            [-]     "cognito-idp:DescribeUserPool",
            [ ]     "cognito-idp:DeleteUserPoolDomain"
            [ ]   ],
            [ ]   "Resource": {
            @@ -12,12 +10,5 @@
            [ ]         "Arn"
            [ ]       ]
            [ ]     }
            [-]   },
            [-]   {
            [-]     "Effect": "Allow",
            [-]     "Action": [
            [-]       "cognito-idp:DescribeUserPoolDomain"
            [-]     ],
            [-]     "Resource": "*"
            [ ]   }
            [ ] ]
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');

const identity = new aws.CognitoIdentityServiceProvider();
const cloudformation = new aws.CloudFormation();

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  const ignoredPromise = handleEvent(event, context);
};

async function handleEvent(event, context) {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    const hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    const hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    const stackName = event.ResourceProperties.stackName;

    for (const providerMeta of hostedUIProviderMeta) {
      const providerCreds = hostedUIProviderCreds.find(({ ProviderName }) => providerMeta.ProviderName === ProviderName);
      if (providerMeta.ProviderName === 'SignInWithApple' && event.RequestType === 'Update') {
        const params = {
          UserPoolId: userPoolId,
          ProviderName: providerMeta.ProviderName,
          AttributeMapping: providerMeta.AttributeMapping,
        };

        if (providerCreds && providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
          params.ProviderDetails = {
            client_id: providerCreds.client_id,
            team_id: providerCreds.team_id,
            key_id: providerCreds.key_id,
            private_key: providerCreds.private_key,
            authorize_scopes: providerMeta.authorize_scopes,
          };
        }

        await identity.updateIdentityProvider(params).promise();
      } else {
        try {
          if (stackName) {
            const { StackResources } = await cloudformation.describeStackResources({ StackName: stackName }).promise();
            const resource = StackResources.find(
              (resource) => resource.LogicalResourceId === \`HostedUI\${providerMeta.ProviderName}ProviderResource\`,
            );
            const params = { ProviderName: providerMeta.ProviderName, UserPoolId: userPoolId };

            if (!resource) {
              await identity.deleteIdentityProvider(params).promise();
            }
          }
        } catch (e) {
          if (err?.code === 'NotFoundException' || err?.code === 'InvalidParameterException') {
            console.log('Not Found', providerMeta.ProviderName);
          } else {
            // bubble up to outer catch.
            throw e;
          }
        }
      }
    }

    response.send(event, context, response.SUCCESS);
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
}

[~] AWS::IAM::Policy HostedUIProvidersCustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,9 +2,7 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateIdentityProvider",
            [ ]     "cognito-idp:UpdateIdentityProvider",
            [-]     "cognito-idp:ListIdentityProviders",
            [ ]     "cognito-idp:DeleteIdentityProvider"
            [ ]   ],
            [ ]   "Resource": {
            @@ -17,7 +15,7 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:DescribeUserPoolDomain"
            [+]     "cloudformation:DescribeStackResources"
            [ ]   ],
            [ ]   "Resource": "*"
            [ ] }
[~] Custom::LambdaCallout HostedUIProvidersCustomResourceInputs 
 └─ [+] stackName
     └─ {"Ref":"AWS::StackName"}

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;

exports[`amplify add auth... ...should init an Js project and add Oauth settings with userpool 2`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬───────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                                │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient    │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateUserPoolDomain      │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteUserPoolDomain      │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DescribeUserPool          │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:CreateIdentityProvider    │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:DeleteIdentityProvider    │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:ListIdentityProviders     │                           │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:UpdateIdentityProvider    │                           │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient      │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ *                                                                                                                                                                                           │ Allow  │ cognito-idp:DescribeUserPoolDomain    │ AWS:\${UserPoolClientRole} │           │
│ - │ *                                                                                                                                                                                           │ Allow  │ cognito-idp:DescribeUserPoolDomain    │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream                  │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                     │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                   │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream                  │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                     │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteUserPoolDomain      │ AWS:\${UserPoolClientRole} │           │
│ + │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DeleteIdentityProvider    │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ cognito-idp:UpdateIdentityProvider    │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼───────────────────────────────────────┼───────────────────────────┼───────────┤
│ + │ *                                                                                                                                                                                           │ Allow  │ cloudformation:DescribeStackResources │ AWS:\${UserPoolClientRole} │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴───────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Parameters
[+] Parameter facebookAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter facebookAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter facebookAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter googleAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter googleAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter googleAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAppIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter loginwithamazonAppSecretUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleAuthorizeScopes: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleClientIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleKeyIdUserPool: {"Type":"String","NoEcho":true}
[+] Parameter signinwithappleTeamIdUserPool: {"Type":"String","NoEcho":true}

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[+] AWS::Cognito::UserPoolDomain HostedUIDomainResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIFacebookProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUIGoogleProviderResource 
[+] AWS::Cognito::UserPoolIdentityProvider HostedUILoginWithAmazonProviderResource 
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,7 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,7 @@
        [ ] [
        [+]   "HostedUIFacebookProviderResource",
        [+]   "HostedUIGoogleProviderResource",
        [+]   "HostedUILoginWithAmazonProviderResource",
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');

const { deleteUserPoolDomain } = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  const ignoredPromise = handleEvent(event, context);
};

async function handleEvent(event, context) {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;

  try {
    const params = { Domain: inputDomainName, UserPoolId: userPoolId };
    await deleteUserPoolDomain(params).promise();
    response.send(event, context, response.SUCCESS);
  } catch (err) {
    if (err?.code === 'NotFoundException' || err?.code === 'InvalidParameterException') {
      response.send(event, context, response.SUCCESS);
    } else {
      response.send(event, context, response.FAILED, { err });
    }
  }
}

[~] AWS::IAM::Policy HostedUICustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,8 +2,6 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateUserPoolDomain",
            [-]     "cognito-idp:DescribeUserPool",
            [ ]     "cognito-idp:DeleteUserPoolDomain"
            [ ]   ],
            [ ]   "Resource": {
            @@ -12,12 +10,5 @@
            [ ]         "Arn"
            [ ]       ]
            [ ]     }
            [-]   },
            [-]   {
            [-]     "Effect": "Allow",
            [-]     "Action": [
            [-]       "cognito-idp:DescribeUserPoolDomain"
            [-]     ],
            [-]     "Resource": "*"
            [ ]   }
            [ ] ]
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');

const identity = new aws.CognitoIdentityServiceProvider();
const cloudformation = new aws.CloudFormation();

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  const ignoredPromise = handleEvent(event, context);
};

async function handleEvent(event, context) {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    const hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    const hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    const stackName = event.ResourceProperties.stackName;

    for (const providerMeta of hostedUIProviderMeta) {
      const providerCreds = hostedUIProviderCreds.find(({ ProviderName }) => providerMeta.ProviderName === ProviderName);
      if (providerMeta.ProviderName === 'SignInWithApple' && event.RequestType === 'Update') {
        const params = {
          UserPoolId: userPoolId,
          ProviderName: providerMeta.ProviderName,
          AttributeMapping: providerMeta.AttributeMapping,
        };

        if (providerCreds && providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
          params.ProviderDetails = {
            client_id: providerCreds.client_id,
            team_id: providerCreds.team_id,
            key_id: providerCreds.key_id,
            private_key: providerCreds.private_key,
            authorize_scopes: providerMeta.authorize_scopes,
          };
        }

        await identity.updateIdentityProvider(params).promise();
      } else {
        try {
          if (stackName) {
            const { StackResources } = await cloudformation.describeStackResources({ StackName: stackName }).promise();
            const resource = StackResources.find(
              (resource) => resource.LogicalResourceId === \`HostedUI\${providerMeta.ProviderName}ProviderResource\`,
            );
            const params = { ProviderName: providerMeta.ProviderName, UserPoolId: userPoolId };

            if (!resource) {
              await identity.deleteIdentityProvider(params).promise();
            }
          }
        } catch (e) {
          if (err?.code === 'NotFoundException' || err?.code === 'InvalidParameterException') {
            console.log('Not Found', providerMeta.ProviderName);
          } else {
            // bubble up to outer catch.
            throw e;
          }
        }
      }
    }

    response.send(event, context, response.SUCCESS);
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
}

[~] AWS::IAM::Policy HostedUIProvidersCustomResourcePolicy 
 └─ [~] PolicyDocument
     └─ [~] .Statement:
         └─ @@ -2,9 +2,7 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:CreateIdentityProvider",
            [ ]     "cognito-idp:UpdateIdentityProvider",
            [-]     "cognito-idp:ListIdentityProviders",
            [ ]     "cognito-idp:DeleteIdentityProvider"
            [ ]   ],
            [ ]   "Resource": {
            @@ -17,7 +15,7 @@
            [ ] {
            [ ]   "Effect": "Allow",
            [ ]   "Action": [
            [-]     "cognito-idp:DescribeUserPoolDomain"
            [+]     "cloudformation:DescribeStackResources"
            [ ]   ],
            [ ]   "Resource": "*"
            [ ] }
[~] Custom::LambdaCallout HostedUIProvidersCustomResourceInputs 
 └─ [+] stackName
     └─ {"Ref":"AWS::StackName"}

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;

// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify add auth... ...should init an Js project and add Oauth settings with userpool 1`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  const ignoredPromise = handleEvent(event, context);
};

async function checkDomainAvailability(domainName) {
  const params = { Domain: domainName };
  try {
    const res = await identity.describeUserPoolDomain(params).promise();
    if (res.DomainDescription && res.DomainDescription.UserPool) {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}

async function deleteUserPoolDomain(domainName, userPoolId) {
  const params = { Domain: domainName, UserPoolId: userPoolId };
  await identity.deleteUserPoolDomain(params).promise();
}

async function createUserPoolDomain(domainName, userPoolId) {
  const params = {
    Domain: domainName,
    UserPoolId: userPoolId,
  };
  await identity.createUserPoolDomain(params).promise();
}

async function createOrUpdateDomain(inputDomainName, userPoolId) {
  const result = await identity.describeUserPool({ UserPoolId: userPoolId }).promise();
  if (result.UserPool.Domain === inputDomainName) {
    // if existing domain is same as input domain do nothing.
    return;
  }
  if (inputDomainName) {
    // create new or replace existing domain.
    const isDomainAvailable = await checkDomainAvailability(inputDomainName);
    if (isDomainAvailable) {
      if (result.UserPool.Domain) {
        await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
      }
      await createUserPoolDomain(inputDomainName, userPoolId);
    } else {
      throw new Error('Domain not available');
    }
  } else if (result.UserPool.Domain) {
    // if input domain is undefined delete existing domain if exists.
    await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
  }
}

async function handleEvent(event, context) {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    const inputDomainName = event.ResourceProperties.hostedUIDomainName;
    if (event.RequestType === 'Delete') {
      await deleteUserPoolDomain(inputDomainName, userPoolId);
    } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
      await createOrUpdateDomain(inputDomainName, userPoolId);
    }
    response.send(event, context, response.SUCCESS, {});
  } catch (err) {
    console.log(err);
    response.send(event, context, response.FAILED, { err });
  }
}


Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;

exports[`amplify add auth... ...should init an Js project and add Oauth settings with userpool 2`] = `
"IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://sin1/","https://sin2/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://sout1/","https://sout2/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 └─ [~] Code
     └─ [~] .ZipFile:
         ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

         └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();

exports.handler = (event, context) => {
  // Don't return promise, response.send() marks context as done internally
  const ignoredPromise = handleEvent(event, context);
};

async function checkDomainAvailability(domainName) {
  const params = { Domain: domainName };
  try {
    const res = await identity.describeUserPoolDomain(params).promise();
    if (res.DomainDescription && res.DomainDescription.UserPool) {
      return false;
    }
    return true;
  } catch (err) {
    return false;
  }
}

async function deleteUserPoolDomain(domainName, userPoolId) {
  const params = { Domain: domainName, UserPoolId: userPoolId };
  await identity.deleteUserPoolDomain(params).promise();
}

async function createUserPoolDomain(domainName, userPoolId) {
  const params = {
    Domain: domainName,
    UserPoolId: userPoolId,
  };
  await identity.createUserPoolDomain(params).promise();
}

async function createOrUpdateDomain(inputDomainName, userPoolId) {
  const result = await identity.describeUserPool({ UserPoolId: userPoolId }).promise();
  if (result.UserPool.Domain === inputDomainName) {
    // if existing domain is same as input domain do nothing.
    return;
  }
  if (inputDomainName) {
    // create new or replace existing domain.
    const isDomainAvailable = await checkDomainAvailability(inputDomainName);
    if (isDomainAvailable) {
      if (result.UserPool.Domain) {
        await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
      }
      await createUserPoolDomain(inputDomainName, userPoolId);
    } else {
      throw new Error('Domain not available');
    }
  } else if (result.UserPool.Domain) {
    // if input domain is undefined delete existing domain if exists.
    await deleteUserPoolDomain(result.UserPool.Domain, userPoolId);
  }
}

async function handleEvent(event, context) {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    const inputDomainName = event.ResourceProperties.hostedUIDomainName;
    if (event.RequestType === 'Delete') {
      await deleteUserPoolDomain(inputDomainName, userPoolId);
    } else if (event.RequestType === 'Update' || event.RequestType === 'Create') {
      await createOrUpdateDomain(inputDomainName, userPoolId);
    }
    response.send(event, context, response.SUCCESS, {});
  } catch (err) {
    console.log(err);
    response.send(event, context, response.FAILED, { err });
  }
}


Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}

"
`;

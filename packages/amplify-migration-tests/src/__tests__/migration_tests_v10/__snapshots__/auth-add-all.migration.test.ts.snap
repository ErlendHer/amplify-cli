// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`amplify migration test auth ...should add auth with max options and work on the latest version 1`] = `
"Resources
[~] AWS::Lambda::Function RoleMapFunction 
 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x

IAM Statement Changes
┌───┬─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┬────────┬────────────────────────────────────┬───────────────────────────┬───────────┐
│   │ Resource                                                                                                                                                                                    │ Effect │ Action                             │ Principal                 │ Condition │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:DescribeUserPoolClient │ AWS:\${UserPoolClientRole} │           │
│ - │ \${UserPool.Arn}                                                                                                                                                                             │ Allow  │ cognito-idp:UpdateUserPoolClient   │ AWS:\${UserPoolClientRole} │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${OAuthCustomResource}"}]}  │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
├───┼─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┼────────┼────────────────────────────────────┼───────────────────────────┼───────────┤
│ - │ {"Fn::Sub":["arn:aws:logs:\${region}:\${account}:log-group:/aws/lambda/\${lambda}:log-stream:*",{"region":"\${AWS::Region}","account":"\${AWS::AccountId}","lambda":"\${UserPoolClientLambda}"}]} │ Allow  │ logs:CreateLogGroup                │ AWS:\${UserPoolClientRole} │           │
│   │                                                                                                                                                                                             │        │ logs:CreateLogStream               │                           │           │
│   │                                                                                                                                                                                             │        │ logs:PutLogEvents                  │                           │           │
└───┴─────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────────┴────────┴────────────────────────────────────┴───────────────────────────┴───────────┘
(NOTE: There may be security-related changes not in this list. See https://github.com/aws/aws-cdk/issues/1299)

Parameters
[-] Parameter facebookAppId: {"Type":"String"}
[-] Parameter googleClientId: {"Type":"String"}
[-] Parameter amazonAppId: {"Type":"String"}
[-] Parameter appleAppId: {"Type":"String"}
[~] Parameter hostedUIProviderCreds: {"Type":"String"} to {"Type":"String","NoEcho":true}

Conditions
[-] Condition ShouldOutputAppClientSecrets: {"Fn::Equals":[{"Ref":"userpoolClientGenerateSecret"},true]}

Resources
[-] AWS::Lambda::Function UserPoolClientLambda destroy
[-] AWS::IAM::Policy UserPoolClientLambdaPolicy destroy
[-] AWS::IAM::Policy UserPoolClientLogPolicy destroy
[-] Custom::LambdaCallout UserPoolClientInputs destroy
[-] AWS::Lambda::Function OAuthCustomResource destroy
[-] AWS::IAM::Policy OAuthCustomResourcePolicy destroy
[-] AWS::IAM::Policy OAuthCustomResourceLogPolicy destroy
[-] Custom::LambdaCallout OAuthCustomResourceInputs destroy
[~] AWS::Cognito::UserPoolClient UserPoolClientWeb 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://signin1/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://signout1/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::Cognito::UserPoolClient UserPoolClient 
 ├─ [+] AllowedOAuthFlows
 │   └─ ["code"]
 ├─ [+] AllowedOAuthFlowsUserPoolClient
 │   └─ true
 ├─ [+] AllowedOAuthScopes
 │   └─ ["phone","email","openid","profile","aws.cognito.signin.user.admin"]
 ├─ [+] CallbackURLs
 │   └─ ["https://signin1/"]
 ├─ [+] LogoutURLs
 │   └─ ["https://signout1/"]
 ├─ [+] SupportedIdentityProviders
 │   └─ ["Facebook","Google","LoginWithAmazon","SignInWithApple","COGNITO"]
 └─ [~] DependsOn
     └─ @@ -1,3 +1,4 @@
        [ ] [
        [+]   "HostedUIProvidersCustomResourceInputs",
        [ ]   "UserPool"
        [ ] ]
[~] AWS::IAM::Role UserPoolClientRole 
 └─ [-] DependsOn
     └─ ["UserPoolClient"]
[~] AWS::Lambda::Function HostedUICustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = domainName => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch(err => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = domainName => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then(res => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch(err => {
          return false;
        });
    };
    let createUserPoolDomain = domainName => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then(result => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then(isDomainAvailable => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then(isDomainAvailable => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch(err => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  const userPoolId = event.ResourceProperties.userPoolId;
  const inputDomainName = event.ResourceProperties.hostedUIDomainName;
  let deleteUserPoolDomain = (domainName) => {
    let params = { Domain: domainName, UserPoolId: userPoolId };
    return identity.deleteUserPoolDomain(params).promise();
  };
  if (event.RequestType == 'Delete') {
    deleteUserPoolDomain(inputDomainName)
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
  if (event.RequestType == 'Update' || event.RequestType == 'Create') {
    let checkDomainAvailability = (domainName) => {
      let params = { Domain: domainName };
      return identity
        .describeUserPoolDomain(params)
        .promise()
        .then((res) => {
          if (res.DomainDescription && res.DomainDescription.UserPool) {
            return false;
          }
          return true;
        })
        .catch((err) => {
          return false;
        });
    };
    let createUserPoolDomain = (domainName) => {
      let params = { Domain: domainName, UserPoolId: userPoolId };
      return identity.createUserPoolDomain(params).promise();
    };
    identity
      .describeUserPool({ UserPoolId: userPoolId })
      .promise()
      .then((result) => {
        if (inputDomainName) {
          if (result.UserPool.Domain === inputDomainName) {
            return;
          } else {
            if (!result.UserPool.Domain) {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return createUserPoolDomain(inputDomainName);
                } else {
                  throw new Error('Domain not available');
                }
              });
            } else {
              return checkDomainAvailability(inputDomainName).then((isDomainAvailable) => {
                if (isDomainAvailable) {
                  return deleteUserPoolDomain(result.UserPool.Domain).then(() => createUserPoolDomain(inputDomainName));
                } else {
                  throw new Error('Domain not available');
                }
              });
            }
          }
        } else {
          if (result.UserPool.Domain) {
            return deleteUserPoolDomain(result.UserPool.Domain);
          }
        }
      })
      .then(() => {
        response.send(event, context, response.SUCCESS, {});
      })
      .catch((err) => {
        console.log(err);
        response.send(event, context, response.FAILED, { err });
      });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Lambda::Function HostedUIProvidersCustomResource 
 ├─ [~] Code
 │   └─ [~] .ZipFile:
 │       ├─ [-] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = providerName => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex(provider => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex(provider => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = providerName => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = providerName => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = providerName => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then(result => {
          console.log(result);
          let providerList = result.Providers.map(provider => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map(provider => provider.ProviderName);
          hostedUIProviderMeta.forEach(providerMetadata => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach(provider => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch(err => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 │       └─ [+] const response = require('cfn-response');
const aws = require('aws-sdk');
const identity = new aws.CognitoIdentityServiceProvider();
exports.handler = (event, context, callback) => {
  try {
    const userPoolId = event.ResourceProperties.userPoolId;
    let hostedUIProviderMeta = JSON.parse(event.ResourceProperties.hostedUIProviderMeta);
    let hostedUIProviderCreds = JSON.parse(event.ResourceProperties.hostedUIProviderCreds);
    if (hostedUIProviderCreds.length === 0) {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Delete') {
      response.send(event, context, response.SUCCESS, {});
    }
    if (event.RequestType == 'Update' || event.RequestType == 'Create') {
      let getRequestParams = (providerName) => {
        let providerMetaIndex = hostedUIProviderMeta.findIndex((provider) => provider.ProviderName === providerName);
        let providerMeta = hostedUIProviderMeta[providerMetaIndex];
        let providerCredsIndex = hostedUIProviderCreds.findIndex((provider) => provider.ProviderName === providerName);
        let providerCreds = hostedUIProviderCreds[providerCredsIndex];
        let requestParams = {
          ProviderName: providerMeta.ProviderName,
          UserPoolId: userPoolId,
          AttributeMapping: providerMeta.AttributeMapping,
        };
        if (providerMeta.ProviderName === 'SignInWithApple') {
          if (providerCreds.client_id && providerCreds.team_id && providerCreds.key_id && providerCreds.private_key) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              team_id: providerCreds.team_id,
              key_id: providerCreds.key_id,
              private_key: providerCreds.private_key,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        } else {
          if (providerCreds.client_id && providerCreds.client_secret) {
            requestParams.ProviderDetails = {
              client_id: providerCreds.client_id,
              client_secret: providerCreds.client_secret,
              authorize_scopes: providerMeta.authorize_scopes,
            };
          } else {
            requestParams = null;
          }
        }
        return requestParams;
      };
      let createIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        requestParams.ProviderType = requestParams.ProviderName;
        return identity.createIdentityProvider(requestParams).promise();
      };
      let updateIdentityProvider = (providerName) => {
        let requestParams = getRequestParams(providerName);
        if (!requestParams) {
          return Promise.resolve();
        }
        return identity.updateIdentityProvider(requestParams).promise();
      };
      let deleteIdentityProvider = (providerName) => {
        let params = { ProviderName: providerName, UserPoolId: userPoolId };
        return identity.deleteIdentityProvider(params).promise();
      };
      let providerPromises = [];
      identity
        .listIdentityProviders({ UserPoolId: userPoolId, MaxResults: 60 })
        .promise()
        .then((result) => {
          console.log(result);
          let providerList = result.Providers.map((provider) => provider.ProviderName);
          let providerListInParameters = hostedUIProviderMeta.map((provider) => provider.ProviderName);
          hostedUIProviderMeta.forEach((providerMetadata) => {
            if (providerList.indexOf(providerMetadata.ProviderName) > -1) {
              providerPromises.push(updateIdentityProvider(providerMetadata.ProviderName));
            } else {
              providerPromises.push(createIdentityProvider(providerMetadata.ProviderName));
            }
          });
          providerList.forEach((provider) => {
            if (providerListInParameters.indexOf(provider) < 0) {
              providerPromises.push(deleteIdentityProvider(provider));
            }
          });
          return Promise.all(providerPromises);
        })
        .then(() => {
          response.send(event, context, response.SUCCESS, {});
        })
        .catch((err) => {
          console.log(err.stack);
          response.send(event, context, response.FAILED, { err });
        });
    }
  } catch (err) {
    console.log(err.stack);
    response.send(event, context, response.FAILED, { err });
  }
};

 └─ [~] Runtime
     ├─ [-] nodejs14.x
     └─ [+] nodejs16.x
[~] AWS::Cognito::IdentityPool IdentityPool 
 └─ [-] DependsOn
     └─ ["UserPoolClientInputs"]

Outputs
[-] Output AppClientSecret: {"Value":{"Fn::GetAtt":["UserPoolClientInputs","appSecret"]},"Condition":"ShouldOutputAppClientSecrets"}
[-] Output GoogleWebClient: {"Value":{"Ref":"googleClientId"}}
[-] Output FacebookWebClient: {"Value":{"Ref":"facebookAppId"}}
[-] Output AmazonWebClient: {"Value":{"Ref":"amazonAppId"}}
[-] Output AppleWebClient: {"Value":{"Ref":"appleAppId"}}

"
`;
